// Cargar variables de entorno desde .env
require('dotenv').config();

const campaignFlow = require('./src/flows/campaignFlow');
const { withHumanDelay } = require('./src/utils/humanDelay');
const logger = require('./src/utils/logger');
const moment = require('moment-timezone');

// Configurar para modo de prueba
process.env.TEST_MODE = 'true';
process.env.USE_LOCAL_ANALYSIS = 'true';
process.env.VENDEDOR_NOMBRE = process.env.VENDEDOR_NOMBRE || 'Roberto Calvo';
process.env.VENDEDOR_EMAIL = process.env.VENDEDOR_EMAIL || 'roberto.calvo@logifit.pe';

console.log('=== CONFIGURACI√ìN DE ENTORNO ===');
console.log(`Modo de prueba: ${process.env.TEST_MODE}`);
console.log(`An√°lisis local: ${process.env.USE_LOCAL_ANALYSIS}`);
console.log(`Vendedor: ${process.env.VENDEDOR_NOMBRE} (${process.env.VENDEDOR_EMAIL})`);
console.log(`Google Refresh Token configurado: ${process.env.GOOGLE_REFRESH_TOKEN ? 'S√≠' : 'No'}`);
console.log(`OpenAI API Key configurada: ${process.env.OPENAI_API_KEY ? 'S√≠' : 'No'}`);

// Funci√≥n para simular el env√≠o de mensajes
async function simulateMessage(userMessage, prospectState) {
  console.log(`\n--- MENSAJE DEL USUARIO ---`);
  console.log(`USUARIO: "${userMessage}"`);
  
  // Procesar el mensaje con el flujo de campa√±a
  const result = await campaignFlow.processMessage(userMessage, prospectState);
  
  // Simular retraso humanizado para la respuesta
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  console.log(`\nBOT: "${result.response}"`);
  
  console.log(`\nESTADO ACTUALIZADO:`);
  console.log(JSON.stringify(result.newState, null, 2));
  
  return result.newState;
}

// Funci√≥n para simular la creaci√≥n de una cita en Google Calendar sin depender del servicio real
async function simulateCalendarAppointment(prospectState) {
  console.log('\n--- SIMULANDO CREACI√ìN DE CITA EN GOOGLE CALENDAR ---');
  
  try {
    // Obtener zona horaria del prospecto o usar la predeterminada
    const timezone = prospectState.timezone || 'America/Lima';
    console.log(`Usando zona horaria: ${timezone}`);
    
    // Crear fecha y hora para la cita (ma√±ana a las 10:00 AM en la zona horaria del prospecto)
    const startDateTime = moment().tz(timezone).add(1, 'day').hour(10).minute(0).second(0);
    const date = startDateTime.format('DD/MM/YYYY');
    const time = startDateTime.format('HH:mm');
    
    // Generar un ID de evento simulado
    const calendarEventId = `mock-event-${Date.now()}`;
    
    // Generar un enlace de Meet simulado
    const meetLink = `https://meet.google.com/mock-link-${Math.random().toString(36).substring(2, 7)}`;
    
    // Crear detalles de la cita simulada
    const appointmentDetails = {
      date,
      time,
      dateTime: startDateTime.toISOString(),
      calendarEventId,
      meetLink
    };
    
    console.log('‚úÖ Cita simulada creada exitosamente:');
    console.log(JSON.stringify(appointmentDetails, null, 2));
    
    // Actualizar el estado del prospecto con los detalles de la cita
    return {
      ...prospectState,
      appointmentDetails,
      meetLink,
      appointmentCreated: true
    };
  } catch (error) {
    console.error('‚ùå Error al crear cita simulada:', error.message);
    return prospectState;
  }
}

// Funci√≥n principal para simular el flujo completo
async function simulateAppointmentFlow() {
  console.log('=== INICIANDO SIMULACI√ìN DE FLUJO DE PROGRAMACI√ìN DE CITA ===\n');
  
  // Estado inicial del prospecto
  let prospectState = {
    conversationState: 'new',
    lastInteraction: new Date()
  };
  
  // Simular conversaci√≥n completa
  
  // 1. Saludo inicial
  prospectState = await simulateMessage(
    "Hola, me interesa su soluci√≥n de monitoreo de fatiga para conductores",
    prospectState
  );
  
  // 2. Proporcionar nombre y empresa
  prospectState = await simulateMessage(
    "Soy Carlos Ram√≠rez, Gerente de Operaciones en Transportes del Norte",
    prospectState
  );
  
  // 3. Responder sobre tama√±o de flota
  prospectState = await simulateMessage(
    "Tenemos una flota de 45 camiones que operan a nivel nacional",
    prospectState
  );
  
  // 4. Responder sobre soluci√≥n actual
  prospectState = await simulateMessage(
    "No tenemos ning√∫n sistema implementado, pero hemos tenido algunos incidentes relacionados con fatiga",
    prospectState
  );
  
  // 5. Responder sobre plazo de decisi√≥n
  prospectState = await simulateMessage(
    "Estamos evaluando opciones para implementar en los pr√≥ximos 30 d√≠as",
    prospectState
  );
  
  // 6. Responder sobre rol y poder de decisi√≥n
  prospectState = await simulateMessage(
    "Soy el Gerente de Operaciones y formo parte del comit√© que tomar√° la decisi√≥n final sobre qu√© sistema implementar",
    prospectState
  );
  
  // Verificar si el prospecto est√° calificado
  if (prospectState.conversationState === 'initial_qualification' && prospectState.qualificationComplete) {
    // Forzar la transici√≥n a estado calificado
    prospectState.conversationState = 'qualified';
    console.log("\n--- FORZANDO TRANSICI√ìN A ESTADO CALIFICADO ---");
  }
  
  // 7. Aceptar invitaci√≥n a demostraci√≥n
  prospectState = await simulateMessage(
    "S√≠, me interesa conocer m√°s detalles sobre c√≥mo funciona su sistema",
    prospectState
  );
  
  // 8. Aceptar horario propuesto
  prospectState = await simulateMessage(
    "Ma√±ana a las 10:00 AM me parece bien",
    prospectState
  );
  
  // 9. Proporcionar correo electr√≥nico
  const emailMessage = "Mi correo es carlos.ramirez@transportesdelnorte.com. Tambi√©n me gustar√≠a incluir a nuestro Jefe de Seguridad, su correo es seguridad@transportesdelnorte.com";
  prospectState = await simulateMessage(emailMessage, prospectState);
  
  // Extraer correos electr√≥nicos del mensaje
  const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;
  const emails = prospectState.emails || [];
  const messageEmails = emailMessage.match(emailRegex) || [];
  
  if (messageEmails.length > 0 && emails.length === 0) {
    prospectState.emails = messageEmails;
    console.log(`\n--- CORREOS EXTRA√çDOS MANUALMENTE: ${messageEmails.join(', ')} ---`);
  }
  
  // Simular la creaci√≥n de la cita en Google Calendar
  prospectState = await simulateCalendarAppointment(prospectState);
  
  // Simular respuesta del sistema despu√©s de crear la cita
  const appointmentResponse = `¬°Listo! He programado la reuni√≥n para ma√±ana a las 10:00 AM.

üöÄ ¬°√önete a nuestra sesi√≥n de Logifit! ‚ú® Logifit es una moderna herramienta tecnol√≥gica inteligente adecuada para la gesti√≥n del descanso y salud de los colaboradores. Brindamos servicios de monitoreo preventivo como apoyo a la mejora de la salud y prevenci√≥n de accidentes, con la finalidad de salvaguardar la vida de los trabajadores y ayudarles a alcanzar el m√°ximo de su productividad en el proyecto.
‚ú®üåû ¬°Tu bienestar es nuestra prioridad! ‚öíÔ∏èüëç

Te he enviado una invitaci√≥n por correo electr√≥nico con los detalles y el enlace para la llamada.

Por favor, confirma que has recibido la invitaci√≥n respondiendo "Confirmado" o "Recibido".`;

  console.log(`\nBOT: "${appointmentResponse}"`);
  
  // Actualizar estado despu√©s de crear la cita
  prospectState = {
    ...prospectState,
    conversationState: 'follow_up',
    appointmentScheduled: true,
    lastInteraction: new Date()
  };
  
  console.log(`\nESTADO ACTUALIZADO DESPU√âS DE CREAR CITA:`);
  console.log(JSON.stringify(prospectState, null, 2));
  
  // 10. Confirmar recepci√≥n de invitaci√≥n
  prospectState = await simulateMessage(
    "Confirmado, ya recib√≠ la invitaci√≥n. Gracias.",
    prospectState
  );
  
  // 11. Preguntar sobre expectativas para la reuni√≥n
  prospectState = await simulateMessage(
    "¬øHay algo espec√≠fico que debamos preparar para la reuni√≥n?",
    prospectState
  );
  
  console.log('\n=== FIN DE LA SIMULACI√ìN ===');
  
  // Mostrar resumen de la cita programada
  if (prospectState.appointmentDetails) {
    console.log('\n=== RESUMEN DE LA CITA PROGRAMADA ===');
    console.log(`Prospecto: ${prospectState.name} (${prospectState.company})`);
    console.log(`Fecha: ${prospectState.appointmentDetails.date}`);
    console.log(`Hora: ${prospectState.appointmentDetails.time}`);
    console.log(`Correos: ${prospectState.emails ? prospectState.emails.join(', ') : 'No disponible'}`);
    console.log(`Estado final: ${prospectState.conversationState}`);
    
    if (prospectState.meetLink) {
      console.log(`Enlace de reuni√≥n: ${prospectState.meetLink}`);
    }
    
    console.log('\n=== DETALLES T√âCNICOS ===');
    console.log(`ID del evento: ${prospectState.appointmentDetails.calendarEventId || 'Simulado'}`);
    console.log(`Zona horaria: ${moment.tz.guess()}`);
    console.log(`Creado en: ${new Date().toISOString()}`);
  } else {
    console.log('\n‚ö†Ô∏è No se complet√≥ la programaci√≥n de la cita');
  }
}

// Ejecutar la simulaci√≥n
simulateAppointmentFlow().catch(error => {
  console.error('Error en la simulaci√≥n:', error);
}); 