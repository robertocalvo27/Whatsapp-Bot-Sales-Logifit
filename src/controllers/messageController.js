const { logger } = require('../utils/logger');
const { getProspectState, updateProspectState } = require('../models/prospectModel');
const { generateOpenAIResponse } = require('../services/openaiService');
const { checkCalendarAvailability, createCalendarEvent } = require('../services/calendarService');
const { extractTextFromMessage, delay } = require('../utils/helpers');
const { CONVERSATION_STATES, QUALIFICATION_QUESTIONS, OPERATOR_TAKEOVER_COMMAND } = require('../utils/constants');
const { saveProspectToSheets } = require('../services/sheetsService');
const marketingService = require('../services/marketingService');
const { handleClosingFlow, handleForcedClosing } = require('../flows/closingFlow');

// Comando para devolver el control al bot
const BOT_RESUME_COMMAND = '!bot';

/**
 * Maneja los mensajes entrantes y dirige la conversaci√≥n seg√∫n el estado
 */
async function handleIncomingMessage(sock, message) {
  try {
    const text = extractTextFromMessage(message);
    if (!text) return; // Ignorar mensajes sin texto
    
    const remoteJid = message.key.remoteJid;
    const senderNumber = remoteJid.split('@')[0];
    
    logger.info(`Mensaje recibido de ${senderNumber}: ${text}`);
    
    // Obtener o crear el estado del prospecto
    const prospectState = await getProspectState(senderNumber);
    
    // Verificar si es un comando de toma de control por operador
    if (text.trim().toLowerCase() === OPERATOR_TAKEOVER_COMMAND) {
      logger.info(`Comando de toma de control detectado para ${senderNumber}`);
      
      // Manejar la toma de control
      const response = await handleOperatorTakeover(prospectState);
      await sendMessage(sock, remoteJid, response);
      return;
    }
    
    // Verificar si es un comando para devolver el control al bot
    if (text.trim().toLowerCase() === BOT_RESUME_COMMAND && 
        prospectState.conversationState === CONVERSATION_STATES.OPERATOR_TAKEOVER) {
      logger.info(`Comando para devolver control al bot detectado para ${senderNumber}`);
      
      // Manejar la devoluci√≥n del control
      const response = await handleBotResume(prospectState);
      await sendMessage(sock, remoteJid, response);
      return;
    }
    
    // Si es el primer mensaje, detectar la fuente de marketing y campa√±a
    if (prospectState.conversationState === CONVERSATION_STATES.INITIAL) {
      const marketingInfo = marketingService.detectMarketingSource(text);
      
      // Actualizar el estado del prospecto con la informaci√≥n de marketing
      await updateProspectState(senderNumber, {
        source: marketingInfo.source,
        campaignName: marketingInfo.campaignName,
        lastInteraction: new Date()
      });
      
      logger.info(`Fuente de marketing detectada para ${senderNumber}: ${marketingInfo.source} - ${marketingInfo.campaignName}`);
    }
    
    // Si el operador ya tom√≥ el control, no procesar el mensaje
    if (prospectState.conversationState === CONVERSATION_STATES.OPERATOR_TAKEOVER) {
      logger.info(`Mensaje no procesado para ${senderNumber} - Operador tiene el control`);
      return;
    }
    
    // Determinar la siguiente acci√≥n basada en el estado actual
    let response;
    
    switch (prospectState.conversationState) {
      case CONVERSATION_STATES.INITIAL:
        response = await handleInitialGreeting(sock, remoteJid, prospectState);
        break;
        
      case CONVERSATION_STATES.GREETING:
        response = await handleQualificationStart(sock, remoteJid, prospectState, text);
        break;
        
      case CONVERSATION_STATES.QUALIFICATION:
        response = await handleQualificationProcess(sock, remoteJid, prospectState, text);
        break;
        
      case CONVERSATION_STATES.INTEREST_VALIDATION:
        response = await handleInterestValidation(sock, remoteJid, prospectState, text);
        break;
        
      case CONVERSATION_STATES.APPOINTMENT_SCHEDULING:
        response = await handleAppointmentScheduling(sock, remoteJid, prospectState, text);
        break;
        
      case CONVERSATION_STATES.CLOSING:
        // Usar el flujo de cierre modular
        const closingResult = await handleClosingFlow(prospectState, text);
        response = closingResult.message;
        break;
        
      case CONVERSATION_STATES.GENERAL_INQUIRY:
        response = await handleGeneralInquiry(sock, remoteJid, prospectState, text);
        break;
        
      case CONVERSATION_STATES.CLOSED:
        // Si la conversaci√≥n ya estaba cerrada, reiniciarla
        await updateProspectState(senderNumber, {
          conversationState: CONVERSATION_STATES.INITIAL,
          lastInteraction: new Date()
        });
        response = await handleInitialGreeting(sock, remoteJid, prospectState);
        break;
        
      default:
        // Si no hay un estado v√°lido, iniciar desde el saludo
        response = await handleInitialGreeting(sock, remoteJid, prospectState);
    }
    
    // Enviar respuesta al usuario
    if (response) {
      await sendMessage(sock, remoteJid, response);
    }
    
  } catch (error) {
    logger.error('Error al procesar mensaje:', error);
    // Intentar enviar un mensaje de error gen√©rico
    try {
      await sendMessage(
        sock, 
        message.key.remoteJid, 
        'Lo siento, estamos experimentando problemas t√©cnicos. Por favor, intenta m√°s tarde.'
      );
    } catch (e) {
      logger.error('Error al enviar mensaje de error:', e);
    }
  }
}

/**
 * Maneja la toma de control por parte de un operador
 */
async function handleOperatorTakeover(prospectState) {
  try {
    // Actualizar el estado a OPERATOR_TAKEOVER
    await updateProspectState(prospectState.phoneNumber, {
      conversationState: CONVERSATION_STATES.OPERATOR_TAKEOVER,
      lastInteraction: new Date(),
      operatorTakeover: {
        timestamp: new Date(),
        previousState: prospectState.conversationState
      }
    });
    
    logger.info(`Operador tom√≥ el control de la conversaci√≥n con ${prospectState.phoneNumber}`);
    
    // Mensaje invisible para el operador (no se env√≠a al cliente)
    return "‚úÖ *Control tomado por operador humano*\n\nAhora puedes continuar la conversaci√≥n directamente. El bot no responder√° hasta que escribas '!bot' para devolverle el control.";
  } catch (error) {
    logger.error('Error al tomar control de la conversaci√≥n:', error);
    return "‚ùå *Error al tomar el control*\n\nHubo un problema al intentar tomar el control de la conversaci√≥n. Por favor, intenta nuevamente.";
  }
}

/**
 * Maneja la devoluci√≥n del control al bot
 */
async function handleBotResume(prospectState) {
  try {
    // Recuperar el estado anterior o establecer uno por defecto
    const previousState = prospectState.operatorTakeover?.previousState || CONVERSATION_STATES.GREETING;
    
    // Actualizar el estado al anterior
    await updateProspectState(prospectState.phoneNumber, {
      conversationState: previousState,
      lastInteraction: new Date(),
      operatorTakeover: null
    });
    
    logger.info(`Control devuelto al bot para la conversaci√≥n con ${prospectState.phoneNumber}`);
    
    // Mensaje invisible para el operador (no se env√≠a al cliente)
    return "‚úÖ *Control devuelto al bot*\n\nEl bot ahora continuar√° la conversaci√≥n desde donde se qued√≥.";
  } catch (error) {
    logger.error('Error al devolver control al bot:', error);
    return "‚ùå *Error al devolver el control*\n\nHubo un problema al intentar devolver el control al bot. Por favor, intenta nuevamente.";
  }
}

/**
 * Maneja el saludo inicial
 */
async function handleInitialGreeting(sock, remoteJid, prospectState) {
  // Actualizar el estado a GREETING
  await updateProspectState(prospectState.phoneNumber, {
    conversationState: CONVERSATION_STATES.GREETING,
    lastInteraction: new Date()
  });
  
  // Personalizar el mensaje seg√∫n la fuente de marketing
  let campaignMessage = '';
  if (prospectState.source && prospectState.source !== 'WhatsApp') {
    campaignMessage = `Gracias por contactarnos a trav√©s de nuestra campa√±a en ${prospectState.source}.`;
  } else {
    campaignMessage = 'Gracias por contactarnos.';
  }
  
  return `¬°Hola! üëã Soy ${process.env.BOT_NAME || 'el asistente virtual'} de Logifit. 

${campaignMessage} Estoy aqu√≠ para ayudarte a resolver cualquier duda sobre nuestras soluciones de monitoreo de fatiga y somnolencia para conductores.

¬øPodr√≠as decirme tu nombre para poder atenderte mejor?`;
}

/**
 * Inicia el proceso de calificaci√≥n
 */
async function handleQualificationStart(sock, remoteJid, prospectState, text) {
  // Guardar el nombre del prospecto
  await updateProspectState(prospectState.phoneNumber, {
    name: text,
    conversationState: CONVERSATION_STATES.QUALIFICATION,
    qualificationStep: 0,
    qualificationAnswers: {},
    lastInteraction: new Date()
  });
  
  return `Mucho gusto, ${text}! üòä 

Para poder ayudarte mejor, me gustar√≠a hacerte algunas preguntas r√°pidas.

${QUALIFICATION_QUESTIONS[0]}`;
}

/**
 * Procesa las respuestas de calificaci√≥n
 */
async function handleQualificationProcess(sock, remoteJid, prospectState, text) {
  const currentStep = prospectState.qualificationStep;
  const answers = prospectState.qualificationAnswers || {};
  
  // Guardar la respuesta actual
  answers[QUALIFICATION_QUESTIONS[currentStep]] = text;
  
  // Verificar si hemos terminado con las preguntas
  if (currentStep >= QUALIFICATION_QUESTIONS.length - 1) {
    // Pasar al siguiente estado
    await updateProspectState(prospectState.phoneNumber, {
      qualificationAnswers: answers,
      conversationState: CONVERSATION_STATES.INTEREST_VALIDATION,
      lastInteraction: new Date()
    });
    
    // Analizar las respuestas con OpenAI para determinar el nivel de inter√©s
    const interestAnalysis = await analyzeProspectInterest(prospectState.phoneNumber, answers);
    
    if (interestAnalysis.highInterest) {
      // Notificar al vendedor sobre un prospecto de alta calidad
      notifyHighQualityProspect(prospectState.phoneNumber, prospectState.name, answers);
      
      return `Gracias por tus respuestas, ${prospectState.name}. 

Basado en lo que me has contado, creo que nuestros productos/servicios podr√≠an ser una excelente opci√≥n para ti.

¬øTe gustar√≠a programar una llamada con uno de nuestros asesores para obtener m√°s informaci√≥n personalizada?`;
    } else {
      return `Gracias por tus respuestas, ${prospectState.name}.

¬øHay algo espec√≠fico sobre nuestros productos/servicios que te gustar√≠a conocer?`;
    }
  } else {
    // Pasar a la siguiente pregunta
    await updateProspectState(prospectState.phoneNumber, {
      qualificationAnswers: answers,
      qualificationStep: currentStep + 1,
      lastInteraction: new Date()
    });
    
    return QUALIFICATION_QUESTIONS[currentStep + 1];
  }
}

/**
 * Valida el inter√©s del prospecto usando OpenAI
 */
async function handleInterestValidation(sock, remoteJid, prospectState, text) {
  // Analizar la respuesta con OpenAI
  const analysis = await generateOpenAIResponse({
    role: 'system',
    content: `Analiza la siguiente respuesta de un prospecto a la pregunta sobre si quiere programar una llamada o conocer m√°s informaci√≥n. 
    Determina si est√° interesado en programar una cita (respuesta afirmativa) o si solo quiere m√°s informaci√≥n general.
    Respuesta del prospecto: "${text}"
    Responde √∫nicamente con "CITA" si quiere programar una cita o "INFO" si solo quiere informaci√≥n.`
  });
  
  if (analysis.includes('CITA')) {
    // Actualizar estado para programar cita
    await updateProspectState(prospectState.phoneNumber, {
      conversationState: CONVERSATION_STATES.APPOINTMENT_SCHEDULING,
      lastInteraction: new Date()
    });
    
    // Obtener disponibilidad del calendario
    const availableSlots = await checkCalendarAvailability();
    
    if (availableSlots && availableSlots.length > 0) {
      const formattedSlots = availableSlots.map((slot, index) => 
        `${index + 1}. ${slot.date} a las ${slot.time}`
      ).join('\n');
      
      return `Excelente, ${prospectState.name}! üòä

Tenemos los siguientes horarios disponibles para una llamada con nuestro asesor:

${formattedSlots}

Por favor, responde con el n√∫mero de la opci√≥n que prefieras.`;
    } else {
      return `Me encantar√≠a programar una llamada contigo, ${prospectState.name}, pero parece que tenemos problemas para acceder a la agenda en este momento.

¬øPodr√≠as indicarme qu√© d√≠as y horarios te vendr√≠an mejor? As√≠ podr√© verificar la disponibilidad manualmente.`;
    }
  } else {
    // Actualizar estado para consultas generales
    await updateProspectState(prospectState.phoneNumber, {
      conversationState: CONVERSATION_STATES.GENERAL_INQUIRY,
      lastInteraction: new Date()
    });
    
    return `Entiendo, ${prospectState.name}. Estoy aqu√≠ para responder cualquier pregunta que tengas sobre nuestros productos/servicios.

¬øQu√© te gustar√≠a saber espec√≠ficamente?`;
  }
}

/**
 * Maneja la programaci√≥n de citas
 */
async function handleAppointmentScheduling(sock, remoteJid, prospectState, text) {
  // Intentar programar la cita
  try {
    // Aqu√≠ ir√≠a la l√≥gica para interpretar la selecci√≥n del usuario y crear el evento
    const appointmentDetails = await createCalendarEvent(prospectState, text);
    
    // Actualizar estado a cierre
    await updateProspectState(prospectState.phoneNumber, {
      conversationState: CONVERSATION_STATES.CLOSING,
      appointmentDetails,
      lastInteraction: new Date()
    });
    
    return `¬°Perfecto! He programado tu cita para el ${appointmentDetails.date} a las ${appointmentDetails.time}.

Te hemos enviado una invitaci√≥n por correo electr√≥nico con los detalles y el enlace para la llamada.

¬øHay algo m√°s en lo que pueda ayudarte?`;
  } catch (error) {
    logger.error('Error al programar cita:', error);
    
    return `Lo siento, ${prospectState.name}, parece que hubo un problema al programar la cita.

¬øPodr√≠as proporcionarme otra fecha y hora que te convenga? Intentar√© programarla nuevamente.`;
  }
}

/**
 * Maneja consultas generales usando OpenAI
 */
async function handleGeneralInquiry(sock, remoteJid, prospectState, text) {
  // Usar OpenAI para generar una respuesta basada en la base de conocimiento
  const response = await generateOpenAIResponse({
    role: 'system',
    content: `Eres un asistente virtual de ventas para una empresa. Responde a la siguiente consulta del cliente de manera amable, profesional y concisa.
    Utiliza la informaci√≥n de la base de conocimiento para proporcionar detalles precisos.
    Si no conoces la respuesta, ofrece poner al cliente en contacto con un asesor humano.
    
    Nombre del cliente: ${prospectState.name}
    Consulta: "${text}"`
  });
  
  // Analizar si el prospecto muestra alto inter√©s despu√©s de la consulta
  const interestAnalysis = await analyzeProspectInterest(prospectState.phoneNumber, {
    ...prospectState.qualificationAnswers,
    'Consulta adicional': text
  });
  
  if (interestAnalysis.highInterest && !prospectState.highInterestNotified) {
    // Notificar al vendedor sobre un prospecto de alta calidad
    notifyHighQualityProspect(prospectState.phoneNumber, prospectState.name, {
      ...prospectState.qualificationAnswers,
      'Consulta adicional': text
    });
    
    // Marcar que ya se ha notificado
    await updateProspectState(prospectState.phoneNumber, {
      highInterestNotified: true,
      lastInteraction: new Date()
    });
  }
  
  // Verificar si debemos ofrecer programar una cita
  if (interestAnalysis.shouldOfferAppointment) {
    await updateProspectState(prospectState.phoneNumber, {
      lastInteraction: new Date()
    });
    
    return `${response}

Por cierto, ${prospectState.name}, basado en tu inter√©s, creo que ser√≠a muy beneficioso para ti tener una conversaci√≥n directa con uno de nuestros asesores.

¬øTe gustar√≠a que programemos una llamada para resolver todas tus dudas de manera m√°s personalizada?`;
  }
  
  await updateProspectState(prospectState.phoneNumber, {
    lastInteraction: new Date()
  });
  
  return response;
}

/**
 * Analiza el nivel de inter√©s del prospecto usando OpenAI
 */
async function analyzeProspectInterest(phoneNumber, answers) {
  try {
    // Convertir las respuestas a formato de texto
    const answersText = Object.entries(answers)
      .map(([question, answer]) => `${question}: ${answer}`)
      .join('\n');
    
    // Consultar a OpenAI para analizar el inter√©s
    const analysis = await generateOpenAIResponse({
      role: 'system',
      content: `Analiza las siguientes respuestas de un prospecto para determinar su nivel de inter√©s en nuestros productos/servicios.
      
      Respuestas del prospecto:
      ${answersText}
      
      Proporciona un an√°lisis en formato JSON con los siguientes campos:
      - highInterest: booleano que indica si el prospecto muestra un alto nivel de inter√©s
      - interestScore: puntuaci√≥n de 1 a 10 del nivel de inter√©s
      - shouldOfferAppointment: booleano que indica si deber√≠amos ofrecer programar una cita
      - reasoning: breve explicaci√≥n de tu an√°lisis`
    });
    
    // Intentar parsear la respuesta como JSON
    try {
      return JSON.parse(analysis);
    } catch (e) {
      logger.error('Error al parsear an√°lisis de inter√©s:', e);
      // Valor por defecto si no se puede parsear
      return {
        highInterest: false,
        interestScore: 5,
        shouldOfferAppointment: false,
        reasoning: 'No se pudo analizar correctamente'
      };
    }
  } catch (error) {
    logger.error('Error al analizar inter√©s del prospecto:', error);
    return {
      highInterest: false,
      interestScore: 5,
      shouldOfferAppointment: false,
      reasoning: 'Error en el an√°lisis'
    };
  }
}

/**
 * Notifica al vendedor sobre un prospecto de alta calidad
 */
function notifyHighQualityProspect(phoneNumber, name, answers) {
  // Aqu√≠ ir√≠a la l√≥gica para notificar al vendedor (por ejemplo, enviar un email o SMS)
  logger.info(`¬°ALERTA DE PROSPECTO DE ALTA CALIDAD! Tel√©fono: ${phoneNumber}, Nombre: ${name}`);
  
  // Convertir las respuestas a formato de texto para el log
  const answersText = Object.entries(answers)
    .map(([question, answer]) => `${question}: ${answer}`)
    .join('\n');
  
  logger.info(`Respuestas del prospecto:\n${answersText}`);
}

/**
 * Env√≠a un mensaje a trav√©s de WhatsApp
 */
async function sendMessage(sock, remoteJid, text) {
  try {
    // Simular escritura para hacer m√°s natural la conversaci√≥n
    await sock.sendPresenceUpdate('composing', remoteJid);
    
    // Calcular tiempo de espera basado en la longitud del mensaje
    const waitTime = Math.min(Math.max(text.length * 30, 1000), 3000);
    await delay(waitTime);
    
    // Enviar el mensaje
    await sock.sendMessage(remoteJid, { text });
    
    // Marcar como le√≠do despu√©s de enviar
    await sock.readMessages([{ remoteJid, id: 'status@broadcast' }]);
    
    logger.info(`Mensaje enviado a ${remoteJid.split('@')[0]}: ${text.substring(0, 50)}...`);
    
    return true;
  } catch (error) {
    logger.error(`Error al enviar mensaje a ${remoteJid}:`, error);
    throw error;
  }
}

module.exports = {
  handleIncomingMessage,
  CONVERSATION_STATES,
  OPERATOR_TAKEOVER_COMMAND,
  BOT_RESUME_COMMAND
}; 